name: "NPM Install"
description: "Zero config NPM package installer with caching"
author: "umidbekk"

inputs:
  working-directory:
    required: false
    default: "${{ github.workspace }}"
    description: "The default working directory"

  cache-key:
    required: false
    default: "npm-v2-"
    description: "An explicit key for restoring and saving the cache"

runs:
  using: "composite"
  steps:
    - name: "Getting package managers info"
      id: vars
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        NPM_LOCKFILE_HASH=${{ hashFiles(format('{0}/package-lock.json', inputs.working-directory)) }};
        YARN_LOCKFILE_HASH=${{ hashFiles(format('{0}/yarn.lock', inputs.working-directory)) }};

        if [[ $NPM_LOCKFILE_HASH != "" ]]; then
          echo "::set-output name=package-manager::npm";
          echo "::set-output name=lockfile-hash::$NPM_LOCKFILE_HASH";
        elif [[ $YARN_LOCKFILE_HASH != "" ]]; then
          echo "::set-output name=package-manager::yarn";
          echo "::set-output name=lockfile-hash::$YARN_LOCKFILE_HASH";
        else
          echo "Could not find any supported lock file" && exit 1;
        fi;

        echo "::set-output name=npm-cache-dir::$(npm config get cache)";
        echo "::set-output name=yarn-cache-dir::$(yarn cache dir)";
        echo "::set-output name=restore-key-prefix::${{ inputs.cache-key }}${{ runner.os }}-";

    - name: "Restoring cache"
      id: cache
      uses: actions/cache@v2
      with:
        path: |
          ${{ steps.vars.outputs.npm-cache-dir }}
          ${{ steps.vars.outputs.yarn-cache-dir }}
          ${{ inputs.working-directory }}/node_modules
        key: ${{ steps.vars.outputs.restore-key-prefix }}${{ steps.vars.outputs.lockfile-hash }}
        restore-keys: ${{ steps.vars.outputs.restore-key-prefix }}

    - name: "Installing dependencies"
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        if [[ "${{ steps.cache.outputs.cache-hit }}" == "true" ]]; then
          echo 'Cache is valid, skipping installation';
          exit 0;
        fi;

        echo "::group::Installing dependencies with ${{ steps.vars.outputs.package-manager }}";
        case "${{ steps.vars.outputs.package-manager }}" in
          npm)
            npm ci;
            ;;

          yarn)
            yarn install --force --frozen-lockfile;
            ;;
        esac;
        echo "::endgroup::";
